delta = linspace(0, 10e-3, 1000);
plot(delta, cos(2*pi*2200*delta) - cos(2*pi*1200*delta))


%%
%Program to perform CPFSK
clear all
close all
clc
A = [0 1 0 0 0 0 0 1];
D = [0 1 0 0 0 1 0 0];
W = [0 1 0 1 0 1 1 1];
x=[1 1 1 A D];
n=length(x);

pulseWidth_Sec = 833e-6;

Fs = 10000; % 10000 Hz de frecuencia de sampleo
Ts = 1/Fs;
f1=1200;
f2=2200;

Xcpfsk=[];
x1=[];
lastPhase = 0;
for z=1:n
    if(x(z)==1)
        x1=[x1,ones(1,100)];
        t1 = linspace(lastPhase/(2*pi*f1), lastPhase/(2*pi*f1) + pulseWidth_Sec, pulseWidth_Sec/Ts);
        % genera puntos espaciados en Ts 
        Xcpfsk=[Xcpfsk, sin(2*pi*f1*t1)];
        lastPhase = 2*pi*f1*(lastPhase/(2*pi*f1) + pulseWidth_Sec + Ts);
    elseif(x(z)==0)
        x1=[x1,zeros(1,100)];
        t2 = linspace(lastPhase/(2*pi*f2), lastPhase/(2*pi*f2) + pulseWidth_Sec, pulseWidth_Sec/Ts);
        % genera puntos espaciados en Ts 
        Xcpfsk=[Xcpfsk, sin(2*pi*f2*t2)];
        lastPhase = 2*pi*f2*(lastPhase/(2*pi*f2) + pulseWidth_Sec + Ts);
    else
        disp('error');
        return
    end
end
pulseWidth_Sec/Ts

subplot 411
t = linspace(0, pulseWidth_Sec * n, length(x1));
plot(x1)
subplot 412
plot(Xcpfsk)
%plot(Xcpfsk)

realTime = [Xcpfsk, zeros(1, floor(440e-6/Ts))];
retarded = [zeros(1, floor(440e-6/Ts)), Xcpfsk];

product = realTime.*retarded;

subplot 413
plot(product);
csvwrite("Producto.csv", product);
csvwrite("FSKsignal.csv", realTime)

Hd = filterFIR1;

a = 1;
b = Hd.Numerator;



filteredOutput = filter(b, a, product);

subplot 414 
plot(filteredOutput);

error = 0;
firstOffset = floor(pulseWidth_Sec/(2*Ts) - 1);
idealOffset = pulseWidth_Sec/Ts;

%close
%plot(filteredOutput, 'red')
%hold on
%plot([0, 0, 0, 0.000000, 0.000000, 0.045652, 0.096826, -0.039241, -0.283791, -0.438452, -0.460523, -0.470081, -0.441281, -0.401240, -0.446669, -0.477741, -0.403163, -0.383283, -0.449840, -0.456579, -0.405842, -0.448084, -0.499918, -0.447440, -0.400580, -0.462701, -0.477175, -0.494202, -0.538802, -0.282159, 0.091268, 0.459653, 0.507420, 0.566880, 0.478809, 0.477547, 0.455566, 0.512422, 0.448825, 0.509197, 0.428797, 0.517239, 0.426091, 0.550272, 0.444525, 0.304459, 0.079110, -0.191118, -0.430479, -0.543521, -0.511454, -0.505304, -0.327831, -0.130534, 0.094657, 0.256430, 0.462398, 0.461464, 0.448503, 0.453235, 0.456762, 0.443541, 0.477703, 0.427956, 0.462041, 0.404017, 0.468771, 0.407427, 0.488731, 0.421010, 0.509352, 0.414229, 0.490341, 0.391428, 0.493797, 0.404016, 0.510309, 0.419732, 0.525046, 0.421500, 0.502860, 0.401600, 0.498460, 0.421179, 0.512409, 0.440249, 0.518171, 0.446698, 0.494312, 0.455399, 0.508466, 0.475146, 0.516232, 0.252674, 0.026246, -0.213699, -0.346884, -0.492099, -0.474515, -0.410903, -0.475801, -0.467657, -0.405998, -0.426315, -0.461231, -0.408925, -0.455338, -0.510108, -0.325737, -0.130476, 0.093813, 0.255530, 0.463529, 0.459833, 0.450292, 0.451898, 0.458135, 0.442274, 0.479186, 0.427010, 0.463398, 0.391942, 0.522705, 0.495866, 0.517332, 0.359690, 0.021543, -0.298688, -0.456209, -0.460624, -0.514300, -0.486451, -0.493665, -0.280952, 0.073054, 0.440247, 0.531862, 0.531737, 0.517478, 0.448751, 0.485192, 0.485048, 0.480800, 0.488775, 0.458099, 0.475276, 0.437000, 0.490378, 0.452850, 0.514308, 0.446146, 0.510329, 0.426402, 0.517329, 0.424319, 0.552672, 0.442725, 0.308279, 0.080347, -0.192527, -0.435163, -0.544487, -0.511135, -0.501875, -0.323715, -0.130473, 0.092969, 0.254708, 0.464681, 0.458237, 0.452102, 0.450568, 0.459512, 0.441025, 0.480658, 0.426088, 0.464745, 0.391362, 0.524001, 0.494427, 0.518547, 0.358004, 0.020677, -0.298437, -0.453965, -0.459792, -0.514475, -0.488096, -0.496437, -0.281616, 0.073814, 0.441894, 0.531006, 0.533657, 0.515957, 0.450073, 0.483927, 0.486487, 0.479321, 0.489967, 0.456717, 0.504837, 0.453197, 0.520472, 0.469823, 0.269948, 0.061046, -0.186332, -0.384320, -0.525966, -0.514990, -0.539038, -0.385476, -0.144768, 0.110225, 0.291004, 0.445030, 0.491742, 0.458148, 0.582243, 0.453473, 0.391526, 0.069135, -0.267369, -0.516007, -0.516512, -0.507985, -0.442752, -0.348163, -0.205865, 0.057508, 0.322808, 0.532974, 0.452180, 0.584683, 0.463679, 0.540464, 0.298445, 0.006097, -0.271006, -0.383551, -0.445221, -0.500062, -0.429090, -0.447978, -0.499799, -0.447335, -0.405872, -0.456907, -0.449243, -0.382764, -0.403553, -0.477687, -0.445924, -0.401236, -0.441823, -0.451830, -0.381819, -0.382993, -0.452771, -0.440553, -0.401258, -0.447660, -0.477793, -0.402642, -0.419248, -0.496922, -0.436687, -0.390674, -0.235362, 0.057466, 0.362945, 0.540896, 0.468816, 0.543781, 0.415409, 0.512508, 0.439917, 0.518374, 0.446344, 0.494525, 0.454915, 0.508898, 0.474859, 0.516571, 0.252763, 0.025983, -0.214069, -0.346833, -0.483779, -0.519329, -0.566441, -0.491989, -0.204067, 0.118980, 0.380318, 0.448949, 0.561402, 0.407835, 0.505721, 0.414043, 0.515122, 0.418528, 0.495496, 0.404595, 0.476395, 0.398922, 0.469926, 0.422783, 0.486352, 0.436386, 0.464920, 0.423028, 0.442663, 0.425611, 0.437409, 0.448914, 0.451313, 0.469020, 0.433984, 0.454031, 0.410112, 0.460662, 0.411401, 0.481430, 0.424769, 0.502692, 0.415719, 0.484538, 0.388707, 0.539703, 0.474286, 0.534164, 0.328081, 0.009838, -0.288714, -0.463138, -0.489293, -0.431895, -0.307837], 'blue')

%plot(filteredOutput, 'red')
%hold on
%plot([0.3, 0.3, 0.3, 0.3, 0.000000, 0.045652, 0.096826, -0.039241, -0.283790, -0.438451, -0.460522, -0.470078, -0.441277, -0.401237, -0.446667, -0.477740, -0.403163, -0.383283, -0.449839, -0.456578, -0.405841, -0.448084, -0.499918, -0.447441, -0.400580, -0.450937, -0.460131, -0.407957, -0.437508, -0.500113, -0.461715, -0.406693, -0.449445, -0.459319, -0.394009, -0.397028, -0.477247, -0.460329, -0.403286, -0.431467, -0.458651, -0.405523, -0.459072, -0.501491, -0.315538, -0.131239, 0.089069, 0.251941, 0.470181, 0.436926, 0.511146, 0.546106, 0.491883, 0.384455, 0.040073, -0.295689, -0.492430, -0.447946, -0.476679, -0.463534, -0.407821, -0.467110, -0.499105, -0.433497, -0.411458, -0.463030, -0.446436, -0.398139, -0.451423, -0.498753, -0.442507, -0.406281, -0.458898, -0.438906, -0.442434, -0.548439, -0.428413, -0.164228, 0.116449, 0.323580, 0.441762, 0.523707, 0.441659, 0.588216, 0.440752, 0.381287, 0.079216, -0.248109, -0.510904, -0.531119, -0.507513, -0.446485, -0.319183, -0.179161, 0.061539, 0.290370, 0.520380, 0.432656, 0.576296, 0.479364, 0.535840, 0.323093, 0.008735, -0.286280, -0.410800, -0.450162, -0.517433, -0.519651, -0.535855, -0.283335, 0.089320, 0.459359, 0.510391, 0.593068, 0.501666, 0.500829, 0.477454, 0.263612, 0.055452, -0.188086, -0.374582, -0.519827, -0.515870, -0.546165, -0.402862, -0.151943, 0.113173, 0.303653, 0.442941, 0.504793, 0.450460, 0.585683, 0.447635, 0.388297, 0.073703, -0.259690, -0.515177, -0.522905, -0.507699, -0.443359, -0.334867, -0.194656, 0.058726, 0.308731, 0.528336, 0.443069, 0.582338, 0.469360, 0.539358, 0.308390, 0.006586, -0.277833, -0.433421, -0.483933, -0.453003, -0.346143],'blue')


function Hd = filterFIR1
%filterFIR1 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.4 and DSP System Toolbox 9.6.
% Generated on: 17-Oct-2022 01:34:29

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are in Hz.
Fs = 10000;  % Sampling Frequency

Fpass = 1400;            % Passband Frequency
Fstop = 2400;            % Stopband Frequency
Dpass = 0.057501127785;  % Passband Ripple
Dstop = 0.1;             % Stopband Attenuation
dens  = 20;              % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]

end













