delta = linspace(0, 10e-3, 1000);
plot(delta, cos(2*pi*2200*delta) - cos(2*pi*1200*delta))

%%

%>>>>>>>>> MATLAB code for binary FSK modulation and de-modulation >>>>>>>%
clc;
clear all;
close all;
x=[ 1 0 1 0 1 0];                                    % Binary Information
bp=.000001;    % bit period 1us 1MHz
disp(' Binary information at Trans mitter :');
disp(x);
%XX representation of transmitting binary information as digital signal XXX
bit=[]; 
for n=1:1:length(x)
    if x(n)==1;
       se=ones(1,100);
    else x(n)==0;
        se=zeros(1,100);
    end
     bit=[bit se];
end
t1=bp/100:bp/100:100*length(x)*(bp/100);
subplot(2,1,1);
plot(t1,bit,'lineWidth',2.5);grid on;
axis([ 0 bp*length(x) -.5 1.5]);
ylabel('amplitude(volt)');
xlabel(' time(sec)');
title('transmitting information as digital signal');
%XXXXXXXXXXXXXXXXXXXXXXX Binary-FSK modulation XXXXXXXXXXXXXXXXXXXXXXXXXXX%
A=5;                               % Amplitude of carrier signal
br=1/bp;                           % bit rate
f1=br*7.3;                           % carrier frequency for information as 1
f2=br*2.2;                           % carrier frequency for information as 0
t2=bp/999:bp/999:bp;                 
ss=length(t2);
m=[];
last = 1;
for (i=1:1:length(x))
    if (x(i)==1)
        y=A*cos(2*pi*f1*t2);
    else
        y=A*cos(2*pi*f2*t2);
    end
    m=[m y];
end
t3=bp/999:bp/999:bp*length(x);
subplot(2,1,2);
plot(t3,m);
xlabel('time(sec)');
ylabel('amplitude(volt)');
title('waveform for binary FSK modulation coresponding binary information');
%XXXXXXXXXXXXXXXXXXXX Binary FSK demodulation XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
mn=[];
for n=ss:ss:length(m)
  t=bp/99:bp/99:bp;
  y1=cos(2*pi*f1*t);                    % carrier siignal for information 1
  y2=cos(2*pi*f2*t);                    % carrier siignal for information 0
  mm=y1.*m((n-(ss-1)):n);
  mmm=y2.*m((n-(ss-1)):n);
  t4=bp/99:bp/99:bp;
  z1=trapz(t4,mm)                                             % intregation 
  z2=trapz(t4,mmm)                                            % intregation 
  zz1=round(2*z1/bp)
  zz2= round(2*z2/bp)
  if(zz1>A/2)      % logic lavel= (0+A)/2 or (A+0)/2 or 2.5 ( in this case)
    a=1;
  else(zz2>A/2)
    a=0;
  end
  mn=[mn a];
end
disp(' Binary information at Reciver :');
disp(mn);
%XXXXX Representation of binary information as digital signal which achived 
%after demodulation XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
bit=[];
for n=1:length(mn);
    if mn(n)==1;
       se=ones(1,100);
    else mn(n)==0;
        se=zeros(1,100);
    end
     bit=[bit se];
end
t4=bp/100:bp/100:100*length(mn)*(bp/100);
subplot(3,1,3)
plot(t4,bit,'LineWidth',2.5);grid on;
axis([ 0 bp*length(mn) -.5 1.5]);
ylabel('amplitude(volt)');
xlabel(' time(sec)');
title('recived information as digital signal after binary FSK demodulation');
%>>>>>>>>>>>>>>>>>>>>>>>>>> end of program >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>%

%%
%Program to perform CPFSK
clear all
close all
clc
x=[1 1 1 1 1 0 1 0 1 0 1];
n=length(x);

pulseWidth_Sec = 833e-6;

Fs = 10000; % 10000 Hz de frecuencia de sampleo
Ts = 1/Fs;
f1=1200;
f2=2200;

Xcpfsk=[];
x1=[];
lastPhase = 0;
for z=1:n
    if(x(z)==1)
        x1=[x1,ones(1,100)];
        t1 = linspace(lastPhase/(2*pi*f1), lastPhase/(2*pi*f1) + pulseWidth_Sec, pulseWidth_Sec/Ts);
        % genera puntos espaciados en Ts 
        Xcpfsk=[Xcpfsk, sin(2*pi*f1*t1)];
        lastPhase = 2*pi*f1*(lastPhase/(2*pi*f1) + pulseWidth_Sec + Ts);
    elseif(x(z)==0)
        x1=[x1,zeros(1,100)];
        t2 = linspace(lastPhase/(2*pi*f2), lastPhase/(2*pi*f2) + pulseWidth_Sec, pulseWidth_Sec/Ts);
        % genera puntos espaciados en Ts 
        Xcpfsk=[Xcpfsk, sin(2*pi*f2*t2)];
        lastPhase = 2*pi*f2*(lastPhase/(2*pi*f2) + pulseWidth_Sec + Ts);
    else
        disp('error');
        return
    end
end
pulseWidth_Sec/Ts

subplot 411
plot(x1)
subplot 412
%plot(Xcpfsk, '-o')
plot(Xcpfsk)

realTime = [Xcpfsk, zeros(1, floor(440e-6/Ts))];
retarded = [zeros(1, floor(440e-6/Ts)), Xcpfsk];

product = realTime.*retarded;

subplot 413
plot(product);

Hd = filterFIR1;

a = 1;
b = Hd.Numerator;

filteredOutput = filter(b, a, product);

subplot 414
plot(filteredOutput);

function Hd = filterFIR1
%filterFIR1 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.4 and DSP System Toolbox 9.6.
% Generated on: 17-Oct-2022 01:34:29

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are in Hz.
Fs = 10000;  % Sampling Frequency

Fpass = 1400;            % Passband Frequency
Fstop = 2400;            % Stopband Frequency
Dpass = 0.057501127785;  % Passband Ripple
Dstop = 0.1;             % Stopband Attenuation
dens  = 20;              % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]

end













